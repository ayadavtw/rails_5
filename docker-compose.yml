version: '2.1'
networks:
  local_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.13.0.0/16

services:
   db:
      image: postgres:12.3-alpine
      container_name: app_db
      ports:
         - 5432:5432
      environment:
        - POSTGRES_DB=postgres
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=password
      volumes:
         - ./postgres-data/shared:/var/lib/postgresql/data:delegated
         # Script to create user
         - ./postgres-data/local-db-user-init.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      networks:
         local_net:
            ipv4_address: '172.13.10.2'
      healthcheck:
         test: ['CMD-SHELL', 'pg_isready -U order_user -d order_api && pg_isready -U order_user -d order_api_test']
         timeout: 20s
         retries: 15

   product_api:
      build: ./product-api
      environment:
        - DB_VENDOR=postgresql
        - DB_ADDR=172.13.10.2
        - DB_PORT=5432
        - DB_USER=product_user
        - DB_PASSWORD=product_password
        - DB_NAME_TEST=product_api_test
        - DB_NAME=product_api
      command: bundle exec rails s -p 3000 -b '0.0.0.0'
      volumes:
        - .:/product-api
      container_name: product_api_1
      depends_on:
        db:
          condition: service_healthy
      networks:
         local_net:
            ipv4_address: '172.13.1.3'
      ports:
         - 3000:3000

   order_api:
     build: ./order-api
     environment:
       - DB_VENDOR=postgresql
       - DB_ADDR=172.13.10.2
       - DB_PORT=5432
       - DB_USER=order_user
       - DB_PASSWORD=order_password
       - DB_NAME_TEST=order_api_test
       - DB_NAME=order_api
       - PRODUCT_PORT=3000
     command: bundle exec rails s -p 3000 -b '0.0.0.0'
     volumes:
       - .:/order-api
     container_name: order_api_1
     depends_on:
       db:
         condition: service_healthy
     networks:
       local_net:
         ipv4_address: '172.13.1.4'
     ports:
       - 3001:3000
