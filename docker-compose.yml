version: '2.2'
networks:
  local_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.13.0.0/16

volumes:
  redis:
  splunk-var:
  splunk-etc:

services:
   db:
      image: postgres:12.3-alpine
      container_name: app_db
      ports:
         - 5432:5432
      environment:
        - POSTGRES_DB=postgres
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=password
      volumes:
         - ./postgres-data/shared:/var/lib/postgresql/data:delegated
         # Script to create user
         - ./postgres-data/local-db-user-init.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      networks:
         local_net:
            ipv4_address: '172.13.1.2'
      healthcheck:
         test: ['CMD-SHELL', 'pg_isready -U order_user -d order_api && pg_isready -U order_user -d order_api_test']
         timeout: 20s
         retries: 15

   product_api:
      build: ./product-api
      environment:
        - DB_VENDOR=postgresql
        - DB_ADDR=172.13.1.2
        - DB_PORT=5432
        - DB_USER=product_user
        - DB_PASSWORD=product_password
        - DB_NAME_TEST=product_api_test
        - DB_NAME=product_api
      command: bundle exec rails s -p 3000 -b '0.0.0.0'
      volumes:
        - ./product-api:/api
      container_name: product_api_1
      depends_on:
        db:
          condition: service_healthy
        redis:
          condition: service_healthy
      networks:
         local_net:
            ipv4_address: '172.13.1.3'
      ports:
         - 3000:3000

   order_api:
     build: ./order-api
     environment:
       - DB_VENDOR=postgresql
       - DB_ADDR=172.13.1.2
       - DB_PORT=5432
       - DB_USER=order_user
       - DB_PASSWORD=order_password
       - DB_NAME_TEST=order_api_test
       - DB_NAME=order_api
       - PRODUCT_PORT=3000
     command: bundle exec rails s -p 3000 -b '0.0.0.0'
     volumes:
       - ./order-api:/api
     container_name: order_api_1
     depends_on:
       db:
         condition: service_healthy
     networks:
       local_net:
         ipv4_address: '172.13.1.4'
     ports:
       - 3001:3000
   nginx:
     image: nginx:1.17.10-alpine
     container_name: nginx_1
#     logging:
#       driver: splunk
#       options:
#         splunk-url: https://172.13.1.6:8088
#         splunk-token: eyJraWQiOiJzcGx1bmsuc2VjcmV0IiwiYWxnIjoiSFM1MTIiLCJ2ZXIiOiJ2MiIsInR0eXAiOiJzdGF0aWMifQ.eyJpc3MiOiJhZG1pbiBmcm9tIHNwbHVua19hcHAiLCJzdWIiOiJhZG1pbiIsImF1ZCI6ImFjY2Vzc19sb2ciLCJpZHAiOiJTcGx1bmsiLCJqdGkiOiI2MTVkNmZhNDcwZjZkNGIzZGQxN2YxN2IxMjM0MjIxNGQxZjkwZTFlZDk0NTNmNGUwZTY4ZjIxMzE2ZGQwZTJjIiwiaWF0IjoxNTkwNDMyNDgyLCJleHAiOjE2MjE5Njg0ODIsIm5iciI6MTU5MDQzMjQ4Mn0.z1BwYwgspxRvcXzOlxHDa36IshJt79NXHWbYwlLcMj9plLxZr5ZQ_Hs18yUldcimtihcly4ACdAP_rfHV4gLOQ
     ports:
       - 8080:80
       - 80:80
       - 443:443
     volumes:
       - ./nginx.conf:/etc/nginx/nginx.conf
       - ./nginx.location.conf:/etc/nginx/nginx.location.conf
       - ./poc.onrails.com.crt:/etc/nginx/poc.onrails.com.crt
       - ./poc.onrails.com.key:/etc/nginx/poc.onrails.com.key
     entrypoint: nginx-debug -g 'daemon off;'
     depends_on:
       - splunk
     networks:
       local_net:
         ipv4_address: '172.13.1.5'

   vsplunk_uf:
     container_name: busybox_vol
     image: busybox
     volumes:
       - /opt/splunk/etc
       - /opt/splunk/var

   splunk:
     image: splunk/splunk:latest
     container_name: app_log
     hostname: splunk_app
     environment:
       - SPLUNK_ENABLE_LISTEN=9997
       - SPLUNK_START_ARGS=--accept-license --no-prompt --answer-yes
       - SPLUNK_USERNAME=admin
       - SPLUNK_PASSWORD=password
     volumes_from:
       - vsplunk_uf
     ports:
       - "8000:8000"
       - "9997:9997"
     restart: always
     networks:
       local_net:
         ipv4_address: '172.13.1.6'
         aliases:
           - splunk

   splunk_forwarder:
     image: splunk/universalforwarder:latest
     container_name: app_log_sender
     hostname: splunk_forwarder
     environment:
       - SPLUNK_START_ARGS=--accept-license --no-prompt --answer-yes
       - SPLUNK_PASSWORD=password
       - SPLUNK_FORWARD_SERVER=splunk_app:9997
     volumes_from:
       - vsplunk_uf
     ports:
       - "8088:8088"
       - "8082:8082"
     restart: always
     networks:
       local_net:
         ipv4_address: '172.13.1.7'
         aliases:
           - splunk_forawarder

   redis:
     container_name: redis_server
     image: 'redis:6.0.3-alpine'
     command: redis-server --requirepass password
     ports:
       - '6379:6379'
     volumes:
       - 'redis:/data'
     networks:
       local_net:
         ipv4_address: '172.13.1.8'
     healthcheck:
       test: exit 0